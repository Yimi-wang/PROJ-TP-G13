
Phase2.o:     file format elf64-x86-64
Phase2.o
architecture: i386:x86-64, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x0000000000000000

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         0000033d  0000000000000000  0000000000000000  00000040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  0000000000000000  0000000000000000  0000037d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  0000000000000000  0000000000000000  0000037d  2**0
                  ALLOC
  3 .rodata       000000d2  0000000000000000  0000000000000000  00000380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .debug_info   00000448  0000000000000000  0000000000000000  00000452  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 0000012a  0000000000000000  0000000000000000  0000089a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_aranges 00000030  0000000000000000  0000000000000000  000009c4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  7 .debug_line   000001f4  0000000000000000  0000000000000000  000009f4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  8 .debug_str    00000390  0000000000000000  0000000000000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      0000002b  0000000000000000  0000000000000000  00000f78  2**0
                  CONTENTS, READONLY
 10 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00000fa3  2**0
                  CONTENTS, READONLY
 11 .note.gnu.property 00000020  0000000000000000  0000000000000000  00000fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .eh_frame     00000058  0000000000000000  0000000000000000  00000fc8  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000 Phase2.c
0000000000000000 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .data	0000000000000000 .data
0000000000000000 l    d  .bss	0000000000000000 .bss
0000000000000000 l    d  .rodata	0000000000000000 .rodata
0000000000000000 l     F .text	000000000000008a new_name1
00000000000000cd l     O .rodata	0000000000000005 __PRETTY_FUNCTION__.3387
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .note.GNU-stack	0000000000000000 .note.GNU-stack
0000000000000000 l    d  .note.gnu.property	0000000000000000 .note.gnu.property
0000000000000000 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000         *UND*	0000000000000000 _GLOBAL_OFFSET_TABLE_
0000000000000000         *UND*	0000000000000000 malloc
0000000000000000         *UND*	0000000000000000 strtok
0000000000000000         *UND*	0000000000000000 strcpy
000000000000008a g     F .text	00000000000002b3 main
0000000000000000         *UND*	0000000000000000 puts
0000000000000000         *UND*	0000000000000000 exit
0000000000000000         *UND*	0000000000000000 fopen
0000000000000000         *UND*	0000000000000000 printf
0000000000000000         *UND*	0000000000000000 fread
0000000000000000         *UND*	0000000000000000 fseek
0000000000000000         *UND*	0000000000000000 __assert_fail
0000000000000000         *UND*	0000000000000000 fwrite
0000000000000000         *UND*	0000000000000000 feof
0000000000000000         *UND*	0000000000000000 __isoc99_scanf
0000000000000000         *UND*	0000000000000000 etap6
0000000000000000         *UND*	0000000000000000 etap7
0000000000000000         *UND*	0000000000000000 fclose
0000000000000000         *UND*	0000000000000000 __stack_chk_fail



Disassembly of section .text:

0000000000000000 <new_name1>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 17 <new_name1+0x17>
			13: R_X86_64_PC32	.rodata-0x4
  17:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1b:	bf 10 00 00 00       	mov    $0x10,%edi
  20:	e8 00 00 00 00       	callq  25 <new_name1+0x25>
			21: R_X86_64_PLT32	malloc-0x4
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <new_name1+0x3c>
			38: R_X86_64_PLT32	strtok-0x4
  3c:	48 89 c2             	mov    %rax,%rdx
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <new_name1+0x4e>
			4a: R_X86_64_PLT32	strcpy-0x4
  4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  52:	48 c7 c1 ff ff ff ff 	mov    $0xffffffffffffffff,%rcx
  59:	48 89 c2             	mov    %rax,%rdx
  5c:	b8 00 00 00 00       	mov    $0x0,%eax
  61:	48 89 d7             	mov    %rdx,%rdi
  64:	f2 ae                	repnz scas %es:(%rdi),%al
  66:	48 89 c8             	mov    %rcx,%rax
  69:	48 f7 d0             	not    %rax
  6c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  74:	48 01 d0             	add    %rdx,%rax
  77:	48 be 5f 73 6f 72 74 	movabs $0x656974726f735f,%rsi
  7e:	69 65 00 
  81:	48 89 30             	mov    %rsi,(%rax)
  84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  88:	c9                   	leaveq 
  89:	c3                   	retq   

000000000000008a <main>:
  8a:	f3 0f 1e fa          	endbr64 
  8e:	55                   	push   %rbp
  8f:	48 89 e5             	mov    %rsp,%rbp
  92:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  96:	89 7d 8c             	mov    %edi,-0x74(%rbp)
  99:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  9d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  a4:	00 00 
  a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  aa:	31 c0                	xor    %eax,%eax
  ac:	83 7d 8c 02          	cmpl   $0x2,-0x74(%rbp)
  b0:	74 16                	je     c8 <main+0x3e>
  b2:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # b9 <main+0x2f>
			b5: R_X86_64_PC32	.rodata+0x4
  b9:	e8 00 00 00 00       	callq  be <main+0x34>
			ba: R_X86_64_PLT32	puts-0x4
  be:	bf 00 00 00 00       	mov    $0x0,%edi
  c3:	e8 00 00 00 00       	callq  c8 <main+0x3e>
			c4: R_X86_64_PLT32	exit-0x4
  c8:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
  cf:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%rbp)
  d6:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  dd:	00 
  de:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  e2:	48 83 c0 08          	add    $0x8,%rax
  e6:	48 8b 00             	mov    (%rax),%rax
  e9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # f0 <main+0x66>
			ec: R_X86_64_PC32	.rodata+0x34
  f0:	48 89 c7             	mov    %rax,%rdi
  f3:	e8 00 00 00 00       	callq  f8 <main+0x6e>
			f4: R_X86_64_PLT32	fopen-0x4
  f8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  fc:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
 101:	75 29                	jne    12c <main+0xa2>
 103:	48 8b 45 80          	mov    -0x80(%rbp),%rax
 107:	48 83 c0 08          	add    $0x8,%rax
 10b:	48 8b 00             	mov    (%rax),%rax
 10e:	48 89 c6             	mov    %rax,%rsi
 111:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 118 <main+0x8e>
			114: R_X86_64_PC32	.rodata+0x3c
 118:	b8 00 00 00 00       	mov    $0x0,%eax
 11d:	e8 00 00 00 00       	callq  122 <main+0x98>
			11e: R_X86_64_PLT32	printf-0x4
 122:	bf 01 00 00 00       	mov    $0x1,%edi
 127:	e8 00 00 00 00       	callq  12c <main+0xa2>
			128: R_X86_64_PLT32	exit-0x4
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
 134:	48 89 d1             	mov    %rdx,%rcx
 137:	ba 05 00 00 00       	mov    $0x5,%edx
 13c:	be 01 00 00 00       	mov    $0x1,%esi
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	callq  149 <main+0xbf>
			145: R_X86_64_PLT32	fread-0x4
 149:	0f b6 45 c0          	movzbl -0x40(%rbp),%eax
 14d:	3c 7f                	cmp    $0x7f,%al
 14f:	75 18                	jne    169 <main+0xdf>
 151:	0f b6 45 c1          	movzbl -0x3f(%rbp),%eax
 155:	3c 45                	cmp    $0x45,%al
 157:	75 10                	jne    169 <main+0xdf>
 159:	0f b6 45 c2          	movzbl -0x3e(%rbp),%eax
 15d:	3c 4c                	cmp    $0x4c,%al
 15f:	75 08                	jne    169 <main+0xdf>
 161:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
 165:	3c 46                	cmp    $0x46,%al
 167:	74 29                	je     192 <main+0x108>
 169:	48 8b 45 80          	mov    -0x80(%rbp),%rax
 16d:	48 83 c0 08          	add    $0x8,%rax
 171:	48 8b 00             	mov    (%rax),%rax
 174:	48 89 c6             	mov    %rax,%rsi
 177:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 17e <main+0xf4>
			17a: R_X86_64_PC32	.rodata+0x5f
 17e:	b8 00 00 00 00       	mov    $0x0,%eax
 183:	e8 00 00 00 00       	callq  188 <main+0xfe>
			184: R_X86_64_PLT32	printf-0x4
 188:	bf 01 00 00 00       	mov    $0x1,%edi
 18d:	e8 00 00 00 00       	callq  192 <main+0x108>
			18e: R_X86_64_PLT32	exit-0x4
 192:	48 8b 45 80          	mov    -0x80(%rbp),%rax
 196:	48 83 c0 08          	add    $0x8,%rax
 19a:	48 8b 00             	mov    (%rax),%rax
 19d:	48 89 c7             	mov    %rax,%rdi
 1a0:	e8 5b fe ff ff       	callq  0 <new_name1>
 1a5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
 1a9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
 1ad:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1b4 <main+0x12a>
			1b0: R_X86_64_PC32	.rodata+0x7d
 1b4:	48 89 c7             	mov    %rax,%rdi
 1b7:	e8 00 00 00 00       	callq  1bc <main+0x132>
			1b8: R_X86_64_PLT32	fopen-0x4
 1bc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
 1c0:	bf 00 04 00 00       	mov    $0x400,%edi
 1c5:	e8 00 00 00 00       	callq  1ca <main+0x140>
			1c6: R_X86_64_PLT32	malloc-0x4
 1ca:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
 1ce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 1d2:	ba 00 00 00 00       	mov    $0x0,%edx
 1d7:	be 00 00 00 00       	mov    $0x0,%esi
 1dc:	48 89 c7             	mov    %rax,%rdi
 1df:	e8 00 00 00 00       	callq  1e4 <main+0x15a>
			1e0: R_X86_64_PLT32	fseek-0x4
 1e4:	e9 b3 00 00 00       	jmpq   29c <main+0x212>
 1e9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 1ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
 1f1:	48 89 d1             	mov    %rdx,%rcx
 1f4:	ba 00 04 00 00       	mov    $0x400,%edx
 1f9:	be 01 00 00 00       	mov    $0x1,%esi
 1fe:	48 89 c7             	mov    %rax,%rdi
 201:	e8 00 00 00 00       	callq  206 <main+0x17c>
			202: R_X86_64_PLT32	fread-0x4
 206:	89 45 98             	mov    %eax,-0x68(%rbp)
 209:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
 20d:	75 1f                	jne    22e <main+0x1a4>
 20f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 216 <main+0x18c>
			212: R_X86_64_PC32	.rodata+0xc9
 216:	ba 34 00 00 00       	mov    $0x34,%edx
 21b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 222 <main+0x198>
			21e: R_X86_64_PC32	.rodata+0x80
 222:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 229 <main+0x19f>
			225: R_X86_64_PC32	.rodata+0x89
 229:	e8 00 00 00 00       	callq  22e <main+0x1a4>
			22a: R_X86_64_PLT32	__assert_fail-0x4
 22e:	81 7d 98 00 04 00 00 	cmpl   $0x400,-0x68(%rbp)
 235:	74 20                	je     257 <main+0x1cd>
 237:	8b 75 98             	mov    -0x68(%rbp),%esi
 23a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 23e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
 242:	48 89 d1             	mov    %rdx,%rcx
 245:	ba 01 00 00 00       	mov    $0x1,%edx
 24a:	48 89 c7             	mov    %rax,%rdi
 24d:	e8 00 00 00 00       	callq  252 <main+0x1c8>
			24e: R_X86_64_PLT32	fwrite-0x4
 252:	89 45 98             	mov    %eax,-0x68(%rbp)
 255:	eb 20                	jmp    277 <main+0x1ed>
 257:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 25b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
 25f:	48 89 d1             	mov    %rdx,%rcx
 262:	ba 01 00 00 00       	mov    $0x1,%edx
 267:	be 00 04 00 00       	mov    $0x400,%esi
 26c:	48 89 c7             	mov    %rax,%rdi
 26f:	e8 00 00 00 00       	callq  274 <main+0x1ea>
			270: R_X86_64_PLT32	fwrite-0x4
 274:	89 45 98             	mov    %eax,-0x68(%rbp)
 277:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
 27b:	75 1f                	jne    29c <main+0x212>
 27d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 284 <main+0x1fa>
			280: R_X86_64_PC32	.rodata+0xc9
 284:	ba 39 00 00 00       	mov    $0x39,%edx
 289:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 290 <main+0x206>
			28c: R_X86_64_PC32	.rodata+0x80
 290:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 297 <main+0x20d>
			293: R_X86_64_PC32	.rodata+0x90
 297:	e8 00 00 00 00       	callq  29c <main+0x212>
			298: R_X86_64_PLT32	__assert_fail-0x4
 29c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 2a0:	48 89 c7             	mov    %rax,%rdi
 2a3:	e8 00 00 00 00       	callq  2a8 <main+0x21e>
			2a4: R_X86_64_PLT32	feof-0x4
 2a8:	85 c0                	test   %eax,%eax
 2aa:	0f 84 39 ff ff ff    	je     1e9 <main+0x15f>
 2b0:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 2b7 <main+0x22d>
			2b3: R_X86_64_PC32	.rodata+0x9c
 2b7:	b8 00 00 00 00       	mov    $0x0,%eax
 2bc:	e8 00 00 00 00       	callq  2c1 <main+0x237>
			2bd: R_X86_64_PLT32	printf-0x4
 2c1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 2c5:	48 89 c6             	mov    %rax,%rsi
 2c8:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 2cf <main+0x245>
			2cb: R_X86_64_PC32	.rodata+0xbe
 2cf:	b8 00 00 00 00       	mov    $0x0,%eax
 2d4:	e8 00 00 00 00       	callq  2d9 <main+0x24f>
			2d5: R_X86_64_PLT32	__isoc99_scanf-0x4
 2d9:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
 2dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 2e1:	48 89 d6             	mov    %rdx,%rsi
 2e4:	48 89 c7             	mov    %rax,%rdi
 2e7:	e8 00 00 00 00       	callq  2ec <main+0x262>
			2e8: R_X86_64_PLT32	etap6-0x4
 2ec:	89 45 9c             	mov    %eax,-0x64(%rbp)
 2ef:	8b 75 9c             	mov    -0x64(%rbp),%esi
 2f2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 2f6:	b9 40 00 00 00       	mov    $0x40,%ecx
 2fb:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 302 <main+0x278>
			2fe: R_X86_64_PC32	.rodata+0xc3
 302:	48 89 c7             	mov    %rax,%rdi
 305:	e8 00 00 00 00       	callq  30a <main+0x280>
			306: R_X86_64_PLT32	etap7-0x4
 30a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 30e:	48 89 c7             	mov    %rax,%rdi
 311:	e8 00 00 00 00       	callq  316 <main+0x28c>
			312: R_X86_64_PLT32	fclose-0x4
 316:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 31a:	48 89 c7             	mov    %rax,%rdi
 31d:	e8 00 00 00 00       	callq  322 <main+0x298>
			31e: R_X86_64_PLT32	fclose-0x4
 322:	b8 00 00 00 00       	mov    $0x0,%eax
 327:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 32b:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 332:	00 00 
 334:	74 05                	je     33b <main+0x2b1>
 336:	e8 00 00 00 00       	callq  33b <main+0x2b1>
			337: R_X86_64_PLT32	__stack_chk_fail-0x4
 33b:	c9                   	leaveq 
 33c:	c3                   	retq   
